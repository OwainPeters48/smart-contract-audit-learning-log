### Blackhole â€“ High Severity Issue #1

1. **Purpose of the contract/function** The vulnerable function lets the contract owner set the router address, which is used for DEX interactions when launching a GenesisPool.  
2. **Location of the issue** Located in `GenesisPoolManager` â†’ `setRouter(address _router)`.  
3. **Root cause:** The require check wrongly enforces `_router == address(0)`, meaning only the zero address can be set.  
4. **Why itâ€™s a problem:** This prevents updating to a valid router and can block new pool launches, breaking `_launchPool` if it tries to call a zero-address router.  
5. **Fix:** Use `require(_router != address(0), "ZA");` so only valid non-zero addresses are allowed.  
6. **Severity reasoning:** High severity â€” affects a core protocol function and could temporarily lock liquidity if the router is set to zero.

---

### Blackhole â€“ High Severity Issue #2

1.  **Purpose of the contract/function** The contract is responsible for creating â€˜GaugeCLâ€™ instances for Liquidity pools, which uses the function â€˜createGaugeâ€™ to create such instance.
2.  **Location of the issue** The problem lies in the â€˜GaugeFactoryCL.createGaugeâ€™.
3.  **Root cause:** There is no access control in the function, so anyone can access it.
4.  **Why itâ€™s a problem:** An attacker can repeatedly call the function which will trigger the â€˜createEternalFarmingâ€™ process, causing the reward token to be transferred to a new pool specified by the attacker, ultimately draining the reward token.
5.  **Fix:** Implement robust access control on the function, ensuring only authorized administrators or designated smart contracts can access it.
6.  **Severity reasoning:** High severity - Can cause high amounts of funds to be stolen by an attacker.

---

### Blackhole - Medium Severity Issue #10

1.  **Purpose of the contract/function** The RouterV2 contract implements ERC-2612 permit functionality, which uses functions â€˜removeLiquidityWithPermit()â€™ and â€˜removeLiquidityETHWithPermit()â€™ to let users remove liquidity from a pair in a gas-efficient way.
2.  **Location of the issue** In the RouterV2 contract: RouterV2.sol#L475Â -Â removeLiquidityWithPermit()Â functionRouterV2.sol#L493Â -Â removeLiquidityETHWithPermit()Â function.
3.  **Root cause:** The functions call â€˜permit()â€™ unconditionally and do not handle errors.  ERC-2612 signatures are single-use/nonce-based, so a frontrunner can consume the nonce and make your permit fail.
4.  **Why itâ€™s a problem:** Attackers can DoS permit-based liquidity removals by front-running and consuming the userâ€™s signature, causing the router call to revert. Users lose gas on failed tx, are forced into extra approve+remove steps, and liquidity removal becomes unreliable under active griefing.
5.  **Fix:** Wrap the permit handling inside a try-catch block and only revert if both the permit fails and the current allowance is insufficient for the operation.
6.  **Severity reasoning:** Medium Severity - Financial loses for users, high likelihood.

---

### Blackhole â€“ Medium Severity Issue #16  

1.  **Purpose of the contract/function** The `getVotes` function in the `BlackGovernor` contract is meant to check a userâ€™s voting power at a given point in time, so that governance proposals can be created, voted on, and executed within valid windows.  
2.  **Location of the issue** The problem lies in the `BlackGovernor` contract, specifically inside the `getVotes` function.  
3.  **Root cause:** The function uses `block.number` instead of `block.timestamp` when determining the point in time for voting power. Since governance relies on time-based windows rather than block height, this mismatch prevents proposals from functioning as intended and leads to a denial of service in the voting process.  
4.  **Why itâ€™s a problem:** This bug prevents all proposals from being processed or executed correctly, effectively breaking core governance functionality.  
5.  **Fix:** Change `block.number` to `block.timestamp` to ensure the correct time reference is used. Also, add test coverage simulating proposal start and end times to catch similar mistakes.  
6.  **Severity reasoning:** Medium severity â€“ breaks governance functionality but does not directly lead to loss of funds.  

---

**Notes / Patterns to watch for:**  
- Require statements that enforce the opposite of intended logic (e.g., `==` instead of `!=`).  
- Only allow non-zero addresses unless deliberately clearing the router, in which case have a separate `clearRouter()` function.
- Always ensure access control is implemented on functions that mint, deploy, or fund new contracts.
- Functions that depend on external approval must have fallback checks.
- Be cautious of confusing block properties (`block.number` vs `block.timestamp`).  

---

**When reading an audit, follow these steps:**  
1. Purpose  
2. Location  
3. Cause  
4. Impact  
5. Fix  
6. Severity Logic  

ðŸ”— [Full Audit Report â€“ Blackhole (Code4rena)](https://code4rena.com/reports/2025-05-blackhole)
